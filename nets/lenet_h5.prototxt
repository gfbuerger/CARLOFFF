name: "LeNet"
layer {
  name: "RR"
  type: "HDF5Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "data/Nord_CAL.txt"
    batch_size: 64
  }
}
layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "data/Nord_VAL.txt"
    batch_size: 100
  }
}
layer {
  name: "H"
  type: "HDF5Data"
  top: "H"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "data/Nord_H.txt"
    batch_size: 1
  }
}
layer {
  name: "H"
  type: "HDF5Data"
  top: "H"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "data/Nord_H.txt"
    batch_size: 1
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
##layer {
##  name: "loss"
##  type: "SoftmaxWithLoss"
##  bottom: "ip2"
##  bottom: "label"
##  top: "loss"
##}

layer {
  bottom: "ip2"
  bottom: "label"
  bottom: "H"
  top: "infoGainLoss"
  name: "infoGainLoss"
  type: "InfogainLoss"
##  infogain_loss_param {
##    axis: 1
##    source: "data/infogainH.binaryproto"
##  }
}

##layer {
##    name: "computeH"
##    bottom: "label"
##    top: "H"
##    type: "Python"
##    python_param {
##        module: "digits_python_layers"
##        layer: "ComputeH"
##        param_str: '{"n_classes": 10}'
##    }
##    exclude { stage: "deploy" }
##}

##layer {
##  name: "loss"
##  type: "InfogainLoss"
##  bottom: "ip2"
##  bottom: "label2"
##  bottom: "infogain"
##  top: "loss"
##  infogain_loss_param {
##    axis: 1  # compute loss and probability along axis
##  }
##  loss_param {
##      normalization: 0
##  }
##  exclude {
##    stage: "deploy"
##  }
##}
